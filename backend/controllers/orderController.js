import asyncHandler from "../middleware/asyncHandler.js";
import Order from "../models/orderModel.js";

// @desc    Create new order
// @route   POST /api/orders
// @access  Private
const addOrderItems = asyncHandler(async (req, res) => {
  const {
    orderItems,
    shippingAddress,
    paymentMethod,
    itemsPrice,
    taxPrice,
    shippingPrice,
    totalPrice,
  } = req.body;

  if(orderItems && orderItems.length === 0) {
    res.status(400);
    throw new Error("No order items");
  }

  const order = new Order({
    orderItems: orderItems.map((x) => ({
      ...x,
      product: x._id,
      _id: undefined  //To prevent any potential conflict with the original _id of the orderItem.
    })),
    user: req.user._id,
    shippingAddress,
    paymentMethod,
    itemsPrice,
    taxPrice,
    shippingPrice,
    totalPrice
  });

  //console.log(order);

  const createdOrder = await order.save();

  res.status(201).json(createdOrder);
});

/* Note:
The purpose of using _id: undefined in the orderItems.map function is to remove 
the _id property from each item before creating the new orderItems array for the Order model.

By removing the _id property from each orderItems object using _id: undefined, 
you ensure that the _id generated by MongoDB is used for the Order document, and any potential conflicts are avoided.
*/


// @desc    Get logged in user orders
// @route   GET /api/orders/mine
// @access  Private
const getMyOrders = asyncHandler(async (req, res) => {
  const orders = await Order.find({user: req.user._id});
  res.json(orders);
});


// @desc    Get order By Id
// @route   GET /api/orders/:id
// @access  Private
const getOrderById = asyncHandler(async (req, res) => {
  const order = await Order.findById(req.params.id).populate("user", "name email");

  if(order) {
    return res.status(200).json(order)
  }

  res.status(404);
  throw new Error("Order not found");
});


// @desc    Update order to paid
// @route   PUT /api/orders/:id/pay
// @access  Private
const updateOrderTOPaid = asyncHandler(async (req, res) => {
  const order = await Order.findById(req.params.id);

  if(order) {
    order.isPaid = true,
    //Below are new fields we are adding to existing order once paid
    order.paidAt = Date.now(), //current date and time
    order.paymentResult = {
      id: req.body.id,
      status: req.body.status,
      update_time: req.body.update_time,
      email_address: req.body.payer?.email_address //These details comes from paypal. 
    }
   //Note: we have test order pay button. when it clicked we will get this payer email_address undefined error. 
   //So we are Using optional chaining (?.) to handle undefined payer.
   
    const updatedOrder = await order.save();
    return res.json(updatedOrder);
  }

  res.status(404);
  throw new Error("Order not found");
});


// @desc    Update order to delivered
// @route   PUT /api/orders/:id/deliver
// @access  Private/admin
const updateOrderToDelivered = asyncHandler(async (req, res) => {
  const order = await Order.findById(req.params.id);

  if(order) {
    order.isDelivered = true,
    order.deliveredAt = Date.now();

    const updatedOrder = await order.save();
    return res.status(200).json(updatedOrder);
  }

  res.status(404);
  throw new Error("Order not found");
});


// @desc    Get all orders
// @route   GET /api/orders
// @access  Private/admin
const getOrders = asyncHandler(async (req, res) => {
  const orders = await Order.find({}).populate("user", "id name");
  res.status(200).json(orders);
});

export {
  addOrderItems,
  getOrderById,
  updateOrderTOPaid,
  updateOrderToDelivered,
  getMyOrders,
  getOrders
}

